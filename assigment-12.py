#1. #An access token is an object encapsulating the security identity of a process or thread.[1] A token is used to make security decisions and to store tamper-proof information about some system entity. While a token is generally used to represent only security information, it is capable of holding additional free-form data that can be attached while the token is being created. Tokens can be duplicated without special privilege, for example to create a new token with lower levels of access rights to restrict the access of a launched application. An access token is used by Windows when a process or thread tries to interact with objects that have security descriptors (securable objects).[1] An access token is represented by the system object of type Token.
   #An access token is generated by the logon service when a user logs on to the system and the credentials provided by the user are authenticated against the authentication database. The authentication database contains credential information required to construct the initial token for the logon session, including its user id, primary group id, all other groups it is part of, and other information. The token is attached to the initial process created in the user session and inherited by subsequent processes created by the initial process.[1] Whenever such a process opens a handle to any resource which has access control enabled, Windows reconciles the data in the target object's security descriptor with the contents of the current effective access token.[2] The result of this access check evaluation is an indication of whether any access is allowed and, if so, what operations (read, write/modify, etc.) the calling application is allowed to perform.



#2. #$ nslookup facebook.com
   #Non-authoritative answer:
   #Server:  google-public-dns-a.google.com
   #Address:  8.8.8.8

   #Name:    facebook.com
   #Addresses:  2a03:2880:f10c:283:face:b00c:0:25de
          157.240.13.35


  #Dilpreet@DESKTOP-E17V5E8 MINGW64 ~/Desktop
  #$ nslookup google.com
 #Non-authoritative answer:
 #Server:  google-public-dns-a.google.com
 #Address:  8.8.8.8

 #Name:    google.com
 #Addresses:  2404:6800:4002:803::200e
         # 172.217.24.238



#3.#import tweepy
  #consumer key=" "
  #consumer sceret=" "
  #access_ token=" "
  #access token sceret=" "
  #auth=tweepy.OAuthhandler(consumer_key,consumer_sceret)
  #auth.set_acess_token(access_token,access_token_sceret)
  #api=tweepy.API(auth)
  #tweets=api.search("#Hacker,lang="en",count=10,tweet_mode="extended")
  #for tweetin tweets:
   #print("  ")
   #print("tweet.full-text")
   #print("   ")



#Ques 4. What is a difference between library and API . Figure it out with examples.

# Library.............


Python library is a collection of functions and methods that allows you to perform lots of actions without writing your own code.

For example, if you are working with data, numpy, scipy, pandas, etc. are the libraries you must know. They have very convenient
data transformation functions that will save you life time to do small tricks.

You might take 1 hour to finish writing a script for a certain data transformation and the script takes O(n^3) time to run. 
Then, it is highly possible that there exists a library that contains this function and runs in O(n).

Also if you are doing web development, there are libraries that will save you much much more time in your development.

For a list of standard libraries: The Python Standard Library, there are a lot of new libraries coming out.

If you are stuck at some point and developing a script might be time consuming, look for library functions that can do your job
on the Internet first (stackoverflow is a good place), you would almost always be able to find one. Even you didn't, stackoverflow
 would have lots of scripts in answers that can do similar tricks, which will save you time as well.
 
 
 
# API(Application Programming Interface........)


Application Program Interfaces, or APIs, are commonly used to retrieve data from remote websites. Sites like Reddit, Twitter, and
Facebook all offer certain data through their APIs. To use an API, you make a request to a remote web server, and retrieve the data
you need.

 APIs are useful in the following cases:

The data is changing quickly. An example of this is stock price data. It doesn't really make sense to regenerate a dataset and download
it every minute -- this will take a lot of bandwidth, and be pretty slow.
 
You want a small piece of a much larger set of data. Reddit comments are one example. What if you want to just pull your own comments on
Reddit? It doesn't make much sense to download the entire Reddit database, then filter just your own comments.
 
There is repeated computation involved. Spotify has an API that can tell you the genre of a piece of music. You could theoretically create
your own classifier, and use it to categorize music, but you'll never have as much data as Spotify does.